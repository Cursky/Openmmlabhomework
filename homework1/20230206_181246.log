2023-02-06 18:12:50,378 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: win32
Python: 3.9.12 (main, Apr  4 2022, 05:22:27) [MSC v.1916 64 bit (AMD64)]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3060
CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3
NVCC: Cuda compilation tools, release 11.3, V11.3.58
MSVC: 用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.29.30146 版
GCC: n/a
PyTorch: 1.12.1
PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192829337
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.13.1
OpenCV: 4.7.0
MMCV: 1.6.1
MMCV Compiler: n/a
MMCV CUDA Compiler: n/a
MMClassification: 0.25.0+
------------------------------------------------------------

2023-02-06 18:12:50,430 - mmcls - INFO - Distributed training: False
2023-02-06 18:12:50,496 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=18,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=1,
    train=dict(
        type='ImageNet',
        data_prefix='data/flower_dataset/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='data/flower_dataset/train.txt',
        classes='data/flower_dataset/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='data/flower_dataset/val',
        ann_file='data/flower_dataset/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/flower_dataset/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[1])
runner = dict(type='EpochBasedRunner', max_epochs=100)
work_dir = 'work_dirs/flower'
gpu_ids = [0]

2023-02-06 18:12:50,642 - mmcls - INFO - Set random seed to 275829846, deterministic: False
2023-02-06 18:12:50,701 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-06 18:12:50,761 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 512]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-06 18:12:51,069 - mmcls - INFO - Start running, host: l1316@YD-HP01, work_dir: D:\openmmlabclass\mmclassification-master\work_dirs\flower
2023-02-06 18:12:51,072 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-06 18:12:51,112 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-06 18:12:51,114 - mmcls - INFO - Checkpoints will be saved to D:\openmmlabclass\mmclassification-master\work_dirs\flower by HardDiskBackend.
2023-02-06 18:14:35,143 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-06 18:14:54,724 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 52.8070, accuracy_top-5: 100.0000
2023-02-06 18:15:39,142 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-06 18:15:41,694 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 52.9825, accuracy_top-5: 100.0000
2023-02-06 18:15:49,304 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-06 18:15:51,417 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 52.4561, accuracy_top-5: 100.0000
2023-02-06 18:15:58,918 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-06 18:16:00,978 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 53.8596, accuracy_top-5: 100.0000
2023-02-06 18:16:08,426 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-06 18:16:10,453 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 54.5614, accuracy_top-5: 100.0000
2023-02-06 18:16:18,394 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-06 18:16:20,541 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 54.7368, accuracy_top-5: 100.0000
2023-02-06 18:16:27,923 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-06 18:16:29,857 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 55.4386, accuracy_top-5: 100.0000
2023-02-06 18:16:37,342 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-06 18:16:39,301 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 55.2632, accuracy_top-5: 100.0000
2023-02-06 18:16:46,846 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-06 18:16:49,063 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 55.7895, accuracy_top-5: 100.0000
2023-02-06 18:16:56,745 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-06 18:16:59,113 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 55.0877, accuracy_top-5: 100.0000
2023-02-06 18:17:06,734 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-06 18:17:08,862 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 55.4386, accuracy_top-5: 100.0000
2023-02-06 18:17:16,465 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-06 18:17:18,656 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 55.2632, accuracy_top-5: 100.0000
2023-02-06 18:17:26,284 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-06 18:17:28,375 - mmcls - INFO - Epoch(val) [13][18]	accuracy_top-1: 55.7895, accuracy_top-5: 100.0000
2023-02-06 18:17:36,266 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-06 18:17:38,286 - mmcls - INFO - Epoch(val) [14][18]	accuracy_top-1: 55.2632, accuracy_top-5: 100.0000
2023-02-06 18:17:45,794 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-06 18:17:47,875 - mmcls - INFO - Epoch(val) [15][18]	accuracy_top-1: 55.4386, accuracy_top-5: 100.0000
2023-02-06 18:17:55,363 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-06 18:17:57,334 - mmcls - INFO - Epoch(val) [16][18]	accuracy_top-1: 55.7895, accuracy_top-5: 100.0000
2023-02-06 18:18:04,856 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-06 18:18:06,826 - mmcls - INFO - Epoch(val) [17][18]	accuracy_top-1: 55.7895, accuracy_top-5: 100.0000
2023-02-06 18:18:14,298 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-06 18:18:16,326 - mmcls - INFO - Epoch(val) [18][18]	accuracy_top-1: 56.3158, accuracy_top-5: 100.0000
2023-02-06 18:18:24,144 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-06 18:18:26,136 - mmcls - INFO - Epoch(val) [19][18]	accuracy_top-1: 55.9649, accuracy_top-5: 100.0000
2023-02-06 18:18:33,662 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-06 18:18:35,749 - mmcls - INFO - Epoch(val) [20][18]	accuracy_top-1: 55.7895, accuracy_top-5: 100.0000
2023-02-06 18:18:43,265 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-06 18:18:45,260 - mmcls - INFO - Epoch(val) [21][18]	accuracy_top-1: 56.8421, accuracy_top-5: 100.0000
2023-02-06 18:18:52,869 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-06 18:18:54,845 - mmcls - INFO - Epoch(val) [22][18]	accuracy_top-1: 56.3158, accuracy_top-5: 100.0000
2023-02-06 18:19:02,489 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-06 18:19:04,481 - mmcls - INFO - Epoch(val) [23][18]	accuracy_top-1: 56.6667, accuracy_top-5: 100.0000
2023-02-06 18:19:12,050 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-06 18:19:14,053 - mmcls - INFO - Epoch(val) [24][18]	accuracy_top-1: 57.1930, accuracy_top-5: 100.0000
2023-02-06 18:19:21,583 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-06 18:19:23,638 - mmcls - INFO - Epoch(val) [25][18]	accuracy_top-1: 57.8947, accuracy_top-5: 100.0000
2023-02-06 18:19:31,265 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-06 18:19:33,245 - mmcls - INFO - Epoch(val) [26][18]	accuracy_top-1: 56.4912, accuracy_top-5: 100.0000
2023-02-06 18:19:40,822 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-06 18:19:42,850 - mmcls - INFO - Epoch(val) [27][18]	accuracy_top-1: 56.6667, accuracy_top-5: 100.0000
2023-02-06 18:19:50,440 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-06 18:19:52,642 - mmcls - INFO - Epoch(val) [28][18]	accuracy_top-1: 58.5965, accuracy_top-5: 100.0000
2023-02-06 18:20:00,188 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-06 18:20:02,187 - mmcls - INFO - Epoch(val) [29][18]	accuracy_top-1: 58.2456, accuracy_top-5: 100.0000
2023-02-06 18:20:09,794 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-06 18:20:11,964 - mmcls - INFO - Epoch(val) [30][18]	accuracy_top-1: 57.5439, accuracy_top-5: 100.0000
2023-02-06 18:20:19,405 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-06 18:20:21,561 - mmcls - INFO - Epoch(val) [31][18]	accuracy_top-1: 57.8947, accuracy_top-5: 100.0000
2023-02-06 18:20:28,973 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-06 18:20:31,002 - mmcls - INFO - Epoch(val) [32][18]	accuracy_top-1: 57.1930, accuracy_top-5: 100.0000
2023-02-06 18:20:38,404 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-06 18:20:40,507 - mmcls - INFO - Epoch(val) [33][18]	accuracy_top-1: 58.5965, accuracy_top-5: 100.0000
2023-02-06 18:20:48,056 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-06 18:20:50,120 - mmcls - INFO - Epoch(val) [34][18]	accuracy_top-1: 59.4737, accuracy_top-5: 100.0000
2023-02-06 18:20:57,755 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-06 18:20:59,782 - mmcls - INFO - Epoch(val) [35][18]	accuracy_top-1: 58.5965, accuracy_top-5: 100.0000
2023-02-06 18:21:07,253 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-06 18:21:09,180 - mmcls - INFO - Epoch(val) [36][18]	accuracy_top-1: 58.9474, accuracy_top-5: 100.0000
2023-02-06 18:21:16,615 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-06 18:21:18,642 - mmcls - INFO - Epoch(val) [37][18]	accuracy_top-1: 60.0000, accuracy_top-5: 100.0000
2023-02-06 18:21:26,137 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-06 18:21:28,084 - mmcls - INFO - Epoch(val) [38][18]	accuracy_top-1: 59.8246, accuracy_top-5: 100.0000
2023-02-06 18:21:35,432 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-06 18:21:37,496 - mmcls - INFO - Epoch(val) [39][18]	accuracy_top-1: 59.2982, accuracy_top-5: 100.0000
2023-02-06 18:21:44,876 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-06 18:21:47,108 - mmcls - INFO - Epoch(val) [40][18]	accuracy_top-1: 58.9474, accuracy_top-5: 100.0000
2023-02-06 18:21:54,434 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-06 18:21:56,689 - mmcls - INFO - Epoch(val) [41][18]	accuracy_top-1: 59.1228, accuracy_top-5: 100.0000
2023-02-06 18:22:04,535 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-06 18:22:06,718 - mmcls - INFO - Epoch(val) [42][18]	accuracy_top-1: 60.1754, accuracy_top-5: 100.0000
2023-02-06 18:22:14,172 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-06 18:22:16,133 - mmcls - INFO - Epoch(val) [43][18]	accuracy_top-1: 60.0000, accuracy_top-5: 100.0000
2023-02-06 18:22:23,677 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-06 18:22:25,581 - mmcls - INFO - Epoch(val) [44][18]	accuracy_top-1: 61.4035, accuracy_top-5: 100.0000
2023-02-06 18:22:33,110 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-06 18:22:35,126 - mmcls - INFO - Epoch(val) [45][18]	accuracy_top-1: 59.6491, accuracy_top-5: 100.0000
2023-02-06 18:22:42,551 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-06 18:22:44,657 - mmcls - INFO - Epoch(val) [46][18]	accuracy_top-1: 60.5263, accuracy_top-5: 100.0000
2023-02-06 18:22:52,140 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-06 18:22:54,150 - mmcls - INFO - Epoch(val) [47][18]	accuracy_top-1: 61.5789, accuracy_top-5: 100.0000
2023-02-06 18:23:01,901 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-06 18:23:03,967 - mmcls - INFO - Epoch(val) [48][18]	accuracy_top-1: 61.7544, accuracy_top-5: 100.0000
2023-02-06 18:23:11,414 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-06 18:23:13,355 - mmcls - INFO - Epoch(val) [49][18]	accuracy_top-1: 61.2281, accuracy_top-5: 100.0000
2023-02-06 18:23:20,806 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-06 18:23:22,845 - mmcls - INFO - Epoch(val) [50][18]	accuracy_top-1: 60.7018, accuracy_top-5: 100.0000
2023-02-06 18:23:30,327 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-06 18:23:32,490 - mmcls - INFO - Epoch(val) [51][18]	accuracy_top-1: 61.4035, accuracy_top-5: 100.0000
2023-02-06 18:23:39,896 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-06 18:23:41,876 - mmcls - INFO - Epoch(val) [52][18]	accuracy_top-1: 61.9298, accuracy_top-5: 100.0000
2023-02-06 18:23:49,276 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-06 18:23:51,370 - mmcls - INFO - Epoch(val) [53][18]	accuracy_top-1: 61.4035, accuracy_top-5: 100.0000
2023-02-06 18:23:59,418 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-06 18:24:01,647 - mmcls - INFO - Epoch(val) [54][18]	accuracy_top-1: 61.5789, accuracy_top-5: 100.0000
2023-02-06 18:24:09,126 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-06 18:24:11,193 - mmcls - INFO - Epoch(val) [55][18]	accuracy_top-1: 61.7544, accuracy_top-5: 100.0000
2023-02-06 18:24:18,692 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-06 18:24:20,660 - mmcls - INFO - Epoch(val) [56][18]	accuracy_top-1: 61.9298, accuracy_top-5: 100.0000
2023-02-06 18:24:28,145 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-06 18:24:30,406 - mmcls - INFO - Epoch(val) [57][18]	accuracy_top-1: 62.6316, accuracy_top-5: 100.0000
2023-02-06 18:24:38,048 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-06 18:24:40,240 - mmcls - INFO - Epoch(val) [58][18]	accuracy_top-1: 61.7544, accuracy_top-5: 100.0000
2023-02-06 18:24:47,684 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-06 18:24:49,722 - mmcls - INFO - Epoch(val) [59][18]	accuracy_top-1: 61.5789, accuracy_top-5: 100.0000
2023-02-06 18:24:57,356 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-06 18:24:59,571 - mmcls - INFO - Epoch(val) [60][18]	accuracy_top-1: 62.2807, accuracy_top-5: 100.0000
2023-02-06 18:25:07,135 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-06 18:25:09,135 - mmcls - INFO - Epoch(val) [61][18]	accuracy_top-1: 62.9825, accuracy_top-5: 100.0000
2023-02-06 18:25:16,650 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-06 18:25:18,696 - mmcls - INFO - Epoch(val) [62][18]	accuracy_top-1: 62.6316, accuracy_top-5: 100.0000
2023-02-06 18:25:26,112 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-06 18:25:28,293 - mmcls - INFO - Epoch(val) [63][18]	accuracy_top-1: 62.9825, accuracy_top-5: 100.0000
2023-02-06 18:25:35,736 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-06 18:25:37,782 - mmcls - INFO - Epoch(val) [64][18]	accuracy_top-1: 63.3333, accuracy_top-5: 100.0000
2023-02-06 18:25:45,141 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-06 18:25:47,222 - mmcls - INFO - Epoch(val) [65][18]	accuracy_top-1: 62.9825, accuracy_top-5: 100.0000
2023-02-06 18:25:54,678 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-06 18:25:56,735 - mmcls - INFO - Epoch(val) [66][18]	accuracy_top-1: 64.3860, accuracy_top-5: 100.0000
2023-02-06 18:26:04,610 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-06 18:26:06,637 - mmcls - INFO - Epoch(val) [67][18]	accuracy_top-1: 63.6842, accuracy_top-5: 100.0000
2023-02-06 18:26:14,005 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-06 18:26:16,029 - mmcls - INFO - Epoch(val) [68][18]	accuracy_top-1: 65.4386, accuracy_top-5: 100.0000
2023-02-06 18:26:23,564 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-06 18:26:25,517 - mmcls - INFO - Epoch(val) [69][18]	accuracy_top-1: 64.0351, accuracy_top-5: 100.0000
2023-02-06 18:26:33,187 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-06 18:26:35,181 - mmcls - INFO - Epoch(val) [70][18]	accuracy_top-1: 63.8596, accuracy_top-5: 100.0000
2023-02-06 18:26:42,860 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-06 18:26:44,777 - mmcls - INFO - Epoch(val) [71][18]	accuracy_top-1: 64.2105, accuracy_top-5: 100.0000
2023-02-06 18:26:52,056 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-06 18:26:54,136 - mmcls - INFO - Epoch(val) [72][18]	accuracy_top-1: 63.6842, accuracy_top-5: 100.0000
2023-02-06 18:27:01,869 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-06 18:27:03,898 - mmcls - INFO - Epoch(val) [73][18]	accuracy_top-1: 63.5088, accuracy_top-5: 100.0000
2023-02-06 18:27:11,193 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-06 18:27:13,329 - mmcls - INFO - Epoch(val) [74][18]	accuracy_top-1: 64.7368, accuracy_top-5: 100.0000
2023-02-06 18:27:20,600 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-06 18:27:22,598 - mmcls - INFO - Epoch(val) [75][18]	accuracy_top-1: 65.9649, accuracy_top-5: 100.0000
2023-02-06 18:27:29,826 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-06 18:27:31,722 - mmcls - INFO - Epoch(val) [76][18]	accuracy_top-1: 64.9123, accuracy_top-5: 100.0000
2023-02-06 18:27:39,006 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-06 18:27:40,911 - mmcls - INFO - Epoch(val) [77][18]	accuracy_top-1: 65.4386, accuracy_top-5: 100.0000
2023-02-06 18:27:48,189 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-06 18:27:50,173 - mmcls - INFO - Epoch(val) [78][18]	accuracy_top-1: 65.0877, accuracy_top-5: 100.0000
2023-02-06 18:27:57,658 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-06 18:27:59,642 - mmcls - INFO - Epoch(val) [79][18]	accuracy_top-1: 64.9123, accuracy_top-5: 100.0000
2023-02-06 18:28:07,028 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-06 18:28:09,157 - mmcls - INFO - Epoch(val) [80][18]	accuracy_top-1: 64.5614, accuracy_top-5: 100.0000
2023-02-06 18:28:16,404 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-06 18:28:18,456 - mmcls - INFO - Epoch(val) [81][18]	accuracy_top-1: 66.3158, accuracy_top-5: 100.0000
2023-02-06 18:28:25,746 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-06 18:28:27,966 - mmcls - INFO - Epoch(val) [82][18]	accuracy_top-1: 66.6667, accuracy_top-5: 100.0000
2023-02-06 18:28:35,201 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-06 18:28:37,353 - mmcls - INFO - Epoch(val) [83][18]	accuracy_top-1: 65.9649, accuracy_top-5: 100.0000
2023-02-06 18:28:44,681 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-06 18:28:46,636 - mmcls - INFO - Epoch(val) [84][18]	accuracy_top-1: 65.2632, accuracy_top-5: 100.0000
2023-02-06 18:28:53,978 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-06 18:28:56,159 - mmcls - INFO - Epoch(val) [85][18]	accuracy_top-1: 66.3158, accuracy_top-5: 100.0000
2023-02-06 18:29:03,928 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-06 18:29:06,124 - mmcls - INFO - Epoch(val) [86][18]	accuracy_top-1: 66.1404, accuracy_top-5: 100.0000
2023-02-06 18:29:13,379 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-06 18:29:15,381 - mmcls - INFO - Epoch(val) [87][18]	accuracy_top-1: 65.9649, accuracy_top-5: 100.0000
2023-02-06 18:29:22,761 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-06 18:29:24,838 - mmcls - INFO - Epoch(val) [88][18]	accuracy_top-1: 67.7193, accuracy_top-5: 100.0000
2023-02-06 18:29:32,148 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-06 18:29:34,060 - mmcls - INFO - Epoch(val) [89][18]	accuracy_top-1: 65.9649, accuracy_top-5: 100.0000
2023-02-06 18:29:41,340 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-06 18:29:43,272 - mmcls - INFO - Epoch(val) [90][18]	accuracy_top-1: 67.3684, accuracy_top-5: 100.0000
2023-02-06 18:29:50,552 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-06 18:29:52,615 - mmcls - INFO - Epoch(val) [91][18]	accuracy_top-1: 67.7193, accuracy_top-5: 100.0000
2023-02-06 18:30:00,169 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-06 18:30:02,299 - mmcls - INFO - Epoch(val) [92][18]	accuracy_top-1: 68.0702, accuracy_top-5: 100.0000
2023-02-06 18:30:09,552 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-06 18:30:11,717 - mmcls - INFO - Epoch(val) [93][18]	accuracy_top-1: 68.0702, accuracy_top-5: 100.0000
2023-02-06 18:30:18,973 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-06 18:30:20,967 - mmcls - INFO - Epoch(val) [94][18]	accuracy_top-1: 65.9649, accuracy_top-5: 100.0000
2023-02-06 18:30:28,229 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-06 18:30:30,138 - mmcls - INFO - Epoch(val) [95][18]	accuracy_top-1: 67.3684, accuracy_top-5: 100.0000
2023-02-06 18:30:37,366 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-06 18:30:39,281 - mmcls - INFO - Epoch(val) [96][18]	accuracy_top-1: 67.3684, accuracy_top-5: 100.0000
2023-02-06 18:30:46,543 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-06 18:30:48,644 - mmcls - INFO - Epoch(val) [97][18]	accuracy_top-1: 68.0702, accuracy_top-5: 100.0000
2023-02-06 18:30:55,911 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-06 18:30:58,113 - mmcls - INFO - Epoch(val) [98][18]	accuracy_top-1: 68.5965, accuracy_top-5: 100.0000
2023-02-06 18:31:05,706 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-06 18:31:07,790 - mmcls - INFO - Epoch(val) [99][18]	accuracy_top-1: 69.1228, accuracy_top-5: 100.0000
2023-02-06 18:31:15,065 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-06 18:31:17,186 - mmcls - INFO - Epoch(val) [100][18]	accuracy_top-1: 68.5965, accuracy_top-5: 100.0000
